#macro(goMethodSignature $index)
	#set ($action = $actions[$index])

	#set ($methodName = $languageUtil.getMethodName($actions, $index))
	#set ($parameters = $action.parameters)
	#set ($parameterList = "")

	#foreach ($parameter in $parameters)
		#set ($parameterName = $languageUtil.getParameterName($parameter.name))
		#set ($parameterType = $languageUtil.getType($parameter.type))
		#set ($parameterList = "$parameterList$parameterName $parameterType")

		#if ($foreach.hasNext)
			#set ($parameterList = "$parameterList, ")
		#end
	#end

	#if ($returnType == $VOID)
		#set ($funcReturn = "error")
	#else
		#set ($funcReturn = "($returnType, error)")
	#end

	func (s *Service) $methodName($parameterList) $funcReturn {
#end

#set ($context = $discovery.context)

// Copyright (c) 2014 Andrea Di Giorgi. All rights reserved.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2.1 of the License, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.

##n

package $package

##n

import (
	#if ($languageUtil.isIOPackageRequired($actions))
		##t	"io"

		##n
	#end

##t	"github.com/ithildir/liferay-sdk-go/liferay"
)

##n

type Service struct {
##t	session liferay.Session
}

##n

func NewService(s liferay.Session) *Service {
##t	return &Service{s}
}

##n

#foreach ($action in $actions)
	#set ($parameters = $action.parameters)
	#set ($returnType = $languageUtil.getReturnType($action.response))
	#set ($responseVariableConversion = $languageUtil.getResponseVariableConversion($returnType))

	#goMethodSignature($foreach.index)

	##t	_params := make(map[string]interface{})

	##n

	#set ($invokeMethod = "Invoke")

	#foreach ($parameter in $parameters)
		#set ($parameterName = $parameter.name)
		#set ($parameterType = $languageUtil.getType($parameter.type))

		#if ($parameterType == $IO_READER)
			#set ($invokeMethod = "Upload")
		#end

		#set ($parameterValue = $languageUtil.getParameterName($parameterName))

		#if ($parameterType == $JSON_OBJECT_WRAPPER)
			##t	liferay.MangleObjectWrapper(_params, ${esc.q}$parameterName${esc.q}, ${esc.q}$languageUtil.getJSONWrapperClassName($parameter.type)${esc.q}, $parameterValue)
		#else
			##t	_params[${esc.q}$parameterName${esc.q}] = $parameterValue
		#end

		#if (!$foreach.hasNext)
			##n
		#end
	#end

	##t	_cmd := map[string]interface{}{
	##t		${esc.q}$context$action.path${esc.q}: _params,
	##t	}

	##n

	#if ($returnType != $VOID)
		##t	var v $returnType

		##n

		##t	$RESPONSE_VARIABLE, err := s.session.$invokeMethod(_cmd)

		##n

		##t	if err == nil && $RESPONSE_VARIABLE != nil {
		##t		v = $responseVariableConversion
		##t	}

		##n

		##t	return v, err
	#else
		##t	_, err := s.session.$invokeMethod(_cmd)

		##n

		##t	return err
	#end

	}

	##n

#end
